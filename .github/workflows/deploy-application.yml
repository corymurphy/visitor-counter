name: cd

on:
  pull_request:
    types: [labeled, unlabeled, opened, reopened, synchronize]
    branches: [main]
  push:
    branches: [main]

env:
  GO_VERSION: 1.24
  APP_NAME: visitor-counter

jobs:
  gate:
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.determine_environments.outputs.environments }}
    steps:
      - name: determine environments to deploy to
        id: determine_environments
        run: |
          environments=""
          
          # Check if development should deploy
          if [[ "${{ github.event_name }}" == "pull_request" && 
                $(echo '${{ toJSON(github.event.pull_request.labels) }}' | jq -r '.[] | select(.name == "deploy development") | .name') == "deploy development" ]]; then
            environments="development"
          fi
          
          # Check if production should deploy
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            if [[ -n "$environments" ]]; then
              environments="$environments,production"
            else
              environments="production"
            fi
          fi
          
          # If no environments to deploy, set to empty array
          if [[ -z "$environments" ]]; then
            environments="[]"
          else
            # Convert comma-separated to JSON array
            environments=$(echo "$environments" | jq -R 'split(",")' | jq -c '.')
          fi
          
          echo "environments=$environments" >> $GITHUB_OUTPUT
          echo "Will deploy to: $environments"

  deploy:
    name: ${{ matrix.environment }}
    needs: gate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        environment: ${{ fromJson(needs.gate.outputs.environments) }}
    permissions:
      contents: read
      id-token: write
      deployments: write
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - uses: google-github-actions/auth@v2
        with:
           credentials_json: '${{ secrets.GOOGLE_CREDENTIALS }}'

      - uses: google-github-actions/setup-gcloud@v2

      - name: set environment variables
        id: env_vars
        run: |
            domain=$(grep -A 3 "\[${{ matrix.environment }}\]" scripts/environments.conf | grep "domain=" | cut -d'=' -f2)
            echo "domain=$domain" >> $GITHUB_OUTPUT
            echo "version=dev-${{ github.event.pull_request.number }}-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: build
        run: |
          echo "Building ${{ env.APP_NAME }} for ${{ matrix.environment }}..."
          go build -o ${{ env.APP_NAME }} main.go
          echo "Build completed successfully"

      - name: configure tls
        run: |
          INSTANCE_NAME=`gcloud compute instances list --filter="tags.items=visitor-counter" --format="value(name)"`

          gcloud compute ssh $INSTANCE_NAME \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command='sudo tee /etc/ssl/private/cloudflare.key > /dev/null << EOF
          ${{ secrets.CLOUDFLARE_PRIVATEKEY }}
          EOF'

          gcloud compute ssh $INSTANCE_NAME \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command='sudo tee /etc/ssl/private/cloudflare.crt > /dev/null << EOF
          ${{ secrets.CLOUDFLARE_PUBLICKEY }}
          EOF'

          gcloud compute ssh $INSTANCE_NAME \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command='sudo chmod 600 /etc/ssl/private/cloudflare.key /etc/ssl/private/cloudflare.crt'

      - name: create deploy script
        run: |
          INSTANCE_NAME=`gcloud compute instances list --filter="tags.items=visitor-counter" --format="value(name)"`

          gcloud compute scp scripts/deploy.sh scripts/environments.conf $INSTANCE_NAME:/tmp/ \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }}
          
          gcloud compute ssh $INSTANCE_NAME \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command="sudo mkdir -p /opt/${{ env.APP_NAME }}/shared && sudo mv /tmp/deploy.sh /opt/${{ env.APP_NAME }}/shared/deploy.sh && sudo mv /tmp/environments.conf /opt/${{ env.APP_NAME }}/shared/environments.conf && sudo chmod +x /opt/${{ env.APP_NAME }}/shared/deploy.sh"
          
          echo "Deployment script and configuration created successfully!"

      - name: create release
        if: matrix.environment == 'production'
        run: |
          gh release create ${{ steps.env_vars.outputs.version }} \
            --title "Release ${{ steps.env_vars.outputs.version }}" \
            --notes "Production deployment for commit ${{ github.sha }}
            
          Changes:
          ${{ github.event.head_commit.message }}" \
            --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: run deploy.sh
        run: |
          echo "Deploying to ${{ matrix.environment }} environment..."
          echo "Version: ${{ steps.env_vars.outputs.version }}"

          INSTANCE_NAME=`gcloud compute instances list --filter="tags.items=visitor-counter" --format="value(name)"`
          
          echo "Copying binary to server..."
          gcloud compute scp ${{ env.APP_NAME }} $INSTANCE_NAME:/tmp/${{ env.APP_NAME }}-${{ steps.env_vars.outputs.version }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }}
          
          echo "Running deployment script..."
          gcloud compute ssh $INSTANCE_NAME \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command="sudo /opt/${{ env.APP_NAME }}/shared/deploy.sh ${{ matrix.environment }} ${{ steps.env_vars.outputs.version }} /tmp/${{ env.APP_NAME }}-${{ steps.env_vars.outputs.version }}"
          
          gcloud compute ssh $INSTANCE_NAME \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command="rm -f /tmp/${{ env.APP_NAME }}-${{ steps.env_vars.outputs.version }}"
          
          echo "${{ matrix.environment }} deployment completed successfully!"
          echo "URL: https://${{ steps.env_vars.outputs.domain }}"

      - name: verify deployment
        run: |
          echo "Verifying ${{ matrix.environment }} deployment..."
          sleep 10
          
          # Test health endpoint
          if curl -f -s "https://${{ steps.env_vars.outputs.domain }}/health" > /dev/null; then
            echo "‚úÖ ${{ matrix.environment }} deployment verified successfully!"
          else
            echo "‚ùå ${{ matrix.environment }} deployment verification failed"
            exit 1
          fi

      - name: comment on pull request
        if: matrix.environment == 'development' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `üöÄ **Development Deployment Successful!**
            
            **Version:** ${{ steps.env_vars.outputs.version }}
            **Environment:** Development
            **URL:** https://${{ steps.env_vars.outputs.domain }}
            **Commit:** \`${{ github.sha }}\`
            
            Your changes have been deployed to the development environment and are ready for testing.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: update environment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ matrix.environment }}',
              description: '${{ matrix.environment }}',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: 'https://${{ steps.env_vars.outputs.domain }}',
              description: '${{ matrix.environment }} deployment successful'
            });
